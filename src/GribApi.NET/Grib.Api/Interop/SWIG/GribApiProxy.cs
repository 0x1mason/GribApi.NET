/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Grib.Api.Interop.SWIG {

public class GribApiProxy {
  public static SWIGTYPE_p_grib_fieldset GribFieldsetNewFromFiles(SWIGTYPE_p_grib_context c, SWIGTYPE_p_p_char filenames, int nfiles, SWIGTYPE_p_p_char keys, int nkeys, string where_string, string order_by_string, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribFieldsetNewFromFiles(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_p_char.getCPtr(filenames), nfiles, SWIGTYPE_p_p_char.getCPtr(keys), nkeys, where_string, order_by_string, out err);
    SWIGTYPE_p_grib_fieldset ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_fieldset(cPtr, false);
    return ret;
  }

  public static void GribFieldsetDelete(SWIGTYPE_p_grib_fieldset set) {
    GribApiProxyPINVOKE.GribFieldsetDelete(SWIGTYPE_p_grib_fieldset.getCPtr(set));
  }

  public static void GribFieldsetRewind(SWIGTYPE_p_grib_fieldset set) {
    GribApiProxyPINVOKE.GribFieldsetRewind(SWIGTYPE_p_grib_fieldset.getCPtr(set));
  }

  public static void GribFieldsetApplyOrderBy(SWIGTYPE_p_grib_fieldset set, string order_by_string) {
    int ret = GribApiProxyPINVOKE.GribFieldsetApplyOrderBy(SWIGTYPE_p_grib_fieldset.getCPtr(set), order_by_string);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_handle GribFieldsetNextHandle(SWIGTYPE_p_grib_fieldset set, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribFieldsetNextHandle(SWIGTYPE_p_grib_fieldset.getCPtr(set), out err);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static void GribFieldsetCount(SWIGTYPE_p_grib_fieldset set) {
    int ret = GribApiProxyPINVOKE.GribFieldsetCount(SWIGTYPE_p_grib_fieldset.getCPtr(set));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribValuesCheck(SWIGTYPE_p_grib_handle h, SWIGTYPE_p_grib_values values, int count) {
    int ret = GribApiProxyPINVOKE.GribValuesCheck(SWIGTYPE_p_grib_handle.getCPtr(h), SWIGTYPE_p_grib_values.getCPtr(values), count);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_index GribIndexNewFromFile(SWIGTYPE_p_grib_context c, string filename, string keys, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribIndexNewFromFile(SWIGTYPE_p_grib_context.getCPtr(c), filename, keys, out err);
    SWIGTYPE_p_grib_index ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_index(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_index GribIndexNew(SWIGTYPE_p_grib_context c, string keys, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribIndexNew(SWIGTYPE_p_grib_context.getCPtr(c), keys, out err);
    SWIGTYPE_p_grib_index ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_index(cPtr, false);
    return ret;
  }

  public static void GribIndexAddFile(SWIGTYPE_p_grib_index index, string filename) {
    int ret = GribApiProxyPINVOKE.GribIndexAddFile(SWIGTYPE_p_grib_index.getCPtr(index), filename);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribIndexWrite(SWIGTYPE_p_grib_index index, string filename) {
    int ret = GribApiProxyPINVOKE.GribIndexWrite(SWIGTYPE_p_grib_index.getCPtr(index), filename);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_index GribIndexRead(SWIGTYPE_p_grib_context c, string filename, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribIndexRead(SWIGTYPE_p_grib_context.getCPtr(c), filename, out err);
    SWIGTYPE_p_grib_index ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_index(cPtr, false);
    return ret;
  }

  public static void GribIndexGetSize(SWIGTYPE_p_grib_index index, string key, ref uint size) {
    int ret = GribApiProxyPINVOKE.GribIndexGetSize(SWIGTYPE_p_grib_index.getCPtr(index), key, ref  size);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribIndexGetLong(SWIGTYPE_p_grib_index index, string key, int[] values, ref uint size) {
    int ret = GribApiProxyPINVOKE.GribIndexGetLong(SWIGTYPE_p_grib_index.getCPtr(index), key, values, ref  size);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribIndexGetDouble(SWIGTYPE_p_grib_index index, string key, double[] values, ref uint size) {
    int ret = GribApiProxyPINVOKE.GribIndexGetDouble(SWIGTYPE_p_grib_index.getCPtr(index), key, values, ref  size);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribIndexGetString(SWIGTYPE_p_grib_index index, string key, SWIGTYPE_p_p_char values, ref uint size) {
    int ret = GribApiProxyPINVOKE.GribIndexGetString(SWIGTYPE_p_grib_index.getCPtr(index), key, SWIGTYPE_p_p_char.getCPtr(values), ref  size);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribIndexSelectLong(SWIGTYPE_p_grib_index index, string key, int value) {
    int ret = GribApiProxyPINVOKE.GribIndexSelectLong(SWIGTYPE_p_grib_index.getCPtr(index), key, value);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribIndexSelectDouble(SWIGTYPE_p_grib_index index, string key, double value) {
    int ret = GribApiProxyPINVOKE.GribIndexSelectDouble(SWIGTYPE_p_grib_index.getCPtr(index), key, value);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribIndexSelectString(SWIGTYPE_p_grib_index index, string key, string value) {
    int ret = GribApiProxyPINVOKE.GribIndexSelectString(SWIGTYPE_p_grib_index.getCPtr(index), key, value);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_handle GribHandleNewFromIndex(SWIGTYPE_p_grib_index index, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribHandleNewFromIndex(SWIGTYPE_p_grib_index.getCPtr(index), out err);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static void GribIndexDelete(SWIGTYPE_p_grib_index index) {
    GribApiProxyPINVOKE.GribIndexDelete(SWIGTYPE_p_grib_index.getCPtr(index));
  }

  public static void GribCountInFile(SWIGTYPE_p_grib_context c, SWIGTYPE_p_FILE f, out int n) {
    int ret = GribApiProxyPINVOKE.GribCountInFile(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_FILE.getCPtr(f), out n);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_handle GribHandleNewFromFile(SWIGTYPE_p_grib_context c, SWIGTYPE_p_FILE f, out int error) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribHandleNewFromFile(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_FILE.getCPtr(f), out error);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static void GribWriteMessage(SWIGTYPE_p_grib_handle h, string file, string mode) {
    int ret = GribApiProxyPINVOKE.GribWriteMessage(SWIGTYPE_p_grib_handle.getCPtr(h), file, mode);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_handle GribUtilSectionsCopy(SWIGTYPE_p_grib_handle hfrom, SWIGTYPE_p_grib_handle hto, int what, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribUtilSectionsCopy(SWIGTYPE_p_grib_handle.getCPtr(hfrom), SWIGTYPE_p_grib_handle.getCPtr(hto), what, out err);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_string_list GribUtilGetParamId(string mars_param) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribUtilGetParamId(mars_param);
    SWIGTYPE_p_grib_string_list ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_string_list(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_string_list GribUtilGetMarsParam(string param_id) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribUtilGetMarsParam(param_id);
    SWIGTYPE_p_grib_string_list ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_string_list(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_handle GribHandleNewFromMessage(SWIGTYPE_p_grib_context c, SWIGTYPE_p_void data, uint data_len) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribHandleNewFromMessage(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_void.getCPtr(data), data_len);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_handle GribHandleNewFromMultiMessage(SWIGTYPE_p_grib_context c, out System.IntPtr data, SWIGTYPE_p_size_t data_len, out int error) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribHandleNewFromMultiMessage(SWIGTYPE_p_grib_context.getCPtr(c), out data, SWIGTYPE_p_size_t.getCPtr(data_len), out error);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_handle GribHandleNewFromMessageCopy(SWIGTYPE_p_grib_context c, SWIGTYPE_p_void data, uint data_len) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribHandleNewFromMessageCopy(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_void.getCPtr(data), data_len);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_handle GribHandleNewFromTemplate(SWIGTYPE_p_grib_context c, string res_name) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribHandleNewFromTemplate(SWIGTYPE_p_grib_context.getCPtr(c), res_name);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_handle GribHandleNewFromSamples(SWIGTYPE_p_grib_context c, string res_name) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribHandleNewFromSamples(SWIGTYPE_p_grib_context.getCPtr(c), res_name);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_handle GribHandleClone(SWIGTYPE_p_grib_handle h) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribHandleClone(SWIGTYPE_p_grib_handle.getCPtr(h));
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static void GribHandleDelete(SWIGTYPE_p_grib_handle h) {
    int ret = GribApiProxyPINVOKE.GribHandleDelete(SWIGTYPE_p_grib_handle.getCPtr(h));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_multi_handle GribMultiHandleNew(SWIGTYPE_p_grib_context c) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribMultiHandleNew(SWIGTYPE_p_grib_context.getCPtr(c));
    SWIGTYPE_p_grib_multi_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_multi_handle(cPtr, false);
    return ret;
  }

  public static void GribMultiHandleAppend(SWIGTYPE_p_grib_handle h, int start_section, SWIGTYPE_p_grib_multi_handle mh) {
    int ret = GribApiProxyPINVOKE.GribMultiHandleAppend(SWIGTYPE_p_grib_handle.getCPtr(h), start_section, SWIGTYPE_p_grib_multi_handle.getCPtr(mh));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribMultiHandleDelete(SWIGTYPE_p_grib_multi_handle mh) {
    int ret = GribApiProxyPINVOKE.GribMultiHandleDelete(SWIGTYPE_p_grib_multi_handle.getCPtr(mh));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribMultiHandleWrite(SWIGTYPE_p_grib_multi_handle mh, SWIGTYPE_p_FILE f) {
    int ret = GribApiProxyPINVOKE.GribMultiHandleWrite(SWIGTYPE_p_grib_multi_handle.getCPtr(mh), SWIGTYPE_p_FILE.getCPtr(f));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetMessage(SWIGTYPE_p_grib_handle h, ref System.IntPtr message, out uint message_length) {
    int ret = GribApiProxyPINVOKE.GribGetMessage(SWIGTYPE_p_grib_handle.getCPtr(h), ref message, out  message_length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetMessageCopy(SWIGTYPE_p_grib_handle h, SWIGTYPE_p_void message, ref uint message_length) {
    int ret = GribApiProxyPINVOKE.GribGetMessageCopy(SWIGTYPE_p_grib_handle.getCPtr(h), SWIGTYPE_p_void.getCPtr(message), ref  message_length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_iterator GribIteratorNew(SWIGTYPE_p_grib_handle h, uint flags, out int error) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribIteratorNew(SWIGTYPE_p_grib_handle.getCPtr(h), flags, out error);
    SWIGTYPE_p_grib_iterator ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_iterator(cPtr, false);
    return ret;
  }

  public static void GribGetData(SWIGTYPE_p_grib_handle h, double[] lats, double[] lons, double[] values, ref uint size) {
    int ret = GribApiProxyPINVOKE.GribGetData(SWIGTYPE_p_grib_handle.getCPtr(h), lats, lons, values, ref  size);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static int GribIteratorNext(SWIGTYPE_p_grib_iterator i, out double lat, out double lon, out double value) {
    return GribApiProxyPINVOKE.GribIteratorNext(SWIGTYPE_p_grib_iterator.getCPtr(i), out lat, out lon, out value);
}

  public static void GribIteratorPrevious(SWIGTYPE_p_grib_iterator i, out double lat, out double lon, out double value) {
    int ret = GribApiProxyPINVOKE.GribIteratorPrevious(SWIGTYPE_p_grib_iterator.getCPtr(i), out lat, out lon, out value);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribIteratorHasNext(SWIGTYPE_p_grib_iterator i) {
    int ret = GribApiProxyPINVOKE.GribIteratorHasNext(SWIGTYPE_p_grib_iterator.getCPtr(i));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribIteratorReset(SWIGTYPE_p_grib_iterator i) {
    int ret = GribApiProxyPINVOKE.GribIteratorReset(SWIGTYPE_p_grib_iterator.getCPtr(i));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribIteratorDelete(SWIGTYPE_p_grib_iterator i) {
    int ret = GribApiProxyPINVOKE.GribIteratorDelete(SWIGTYPE_p_grib_iterator.getCPtr(i));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_nearest GribNearestNew(SWIGTYPE_p_grib_handle h, out int error) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribNearestNew(SWIGTYPE_p_grib_handle.getCPtr(h), out error);
    SWIGTYPE_p_grib_nearest ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_nearest(cPtr, false);
    return ret;
  }

  public static void GribNearestFind(SWIGTYPE_p_grib_nearest nearest, SWIGTYPE_p_grib_handle h, double inlat, double inlon, uint flags, double[] outlats, double[] outlons, double[] values, double[] distances, int[] indexes, SWIGTYPE_p_size_t len) {
    int ret = GribApiProxyPINVOKE.GribNearestFind(SWIGTYPE_p_grib_nearest.getCPtr(nearest), SWIGTYPE_p_grib_handle.getCPtr(h), inlat, inlon, flags, outlats, outlons, values, distances, indexes, SWIGTYPE_p_size_t.getCPtr(len));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribNearestDelete(SWIGTYPE_p_grib_nearest nearest) {
    int ret = GribApiProxyPINVOKE.GribNearestDelete(SWIGTYPE_p_grib_nearest.getCPtr(nearest));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribNearestFindMultiple(SWIGTYPE_p_grib_handle h, int is_lsm, double[] inlats, double[] inlons, int npoints, double[] outlats, double[] outlons, double[] values, double[] distances, int[] indexes) {
    int ret = GribApiProxyPINVOKE.GribNearestFindMultiple(SWIGTYPE_p_grib_handle.getCPtr(h), is_lsm, inlats, inlons, npoints, outlats, outlons, values, distances, indexes);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetOffset(SWIGTYPE_p_grib_handle h, string key, out uint offset) {
    int ret = GribApiProxyPINVOKE.GribGetOffset(SWIGTYPE_p_grib_handle.getCPtr(h), key, out offset);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetSize(SWIGTYPE_p_grib_handle h, string key, ref uint size) {
    int ret = GribApiProxyPINVOKE.GribGetSize(SWIGTYPE_p_grib_handle.getCPtr(h), key, ref  size);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetLength(SWIGTYPE_p_grib_handle h, string key, ref uint length) {
    int ret = GribApiProxyPINVOKE.GribGetLength(SWIGTYPE_p_grib_handle.getCPtr(h), key, ref  length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetLong(SWIGTYPE_p_grib_handle h, string key, out int value) {
    int ret = GribApiProxyPINVOKE.GribGetLong(SWIGTYPE_p_grib_handle.getCPtr(h), key, out value);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetDouble(SWIGTYPE_p_grib_handle h, string key, out double value) {
    int ret = GribApiProxyPINVOKE.GribGetDouble(SWIGTYPE_p_grib_handle.getCPtr(h), key, out value);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetDoubleElement(SWIGTYPE_p_grib_handle h, string key, int i, out double value) {
    int ret = GribApiProxyPINVOKE.GribGetDoubleElement(SWIGTYPE_p_grib_handle.getCPtr(h), key, i, out value);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetDoubleElements(SWIGTYPE_p_grib_handle h, string key, SWIGTYPE_p_int i, int size, out double value) {
    int ret = GribApiProxyPINVOKE.GribGetDoubleElements(SWIGTYPE_p_grib_handle.getCPtr(h), key, SWIGTYPE_p_int.getCPtr(i), size, out value);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetString(SWIGTYPE_p_grib_handle h, string key, System.Text.StringBuilder mesg, ref uint length) {
    int ret = GribApiProxyPINVOKE.GribGetString(SWIGTYPE_p_grib_handle.getCPtr(h), key, mesg, ref  length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetBytes(SWIGTYPE_p_grib_handle h, string key, byte[] bytes, ref uint length) {
    int ret = GribApiProxyPINVOKE.GribGetBytes(SWIGTYPE_p_grib_handle.getCPtr(h), key, bytes, ref  length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetDoubleArray(SWIGTYPE_p_grib_handle h, string key, double[] vals, ref uint length) {
    int ret = GribApiProxyPINVOKE.GribGetDoubleArray(SWIGTYPE_p_grib_handle.getCPtr(h), key, vals, ref  length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetLongArray(SWIGTYPE_p_grib_handle h, string key, int[] vals, ref uint length) {
    int ret = GribApiProxyPINVOKE.GribGetLongArray(SWIGTYPE_p_grib_handle.getCPtr(h), key, vals, ref  length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribCopyNamespace(SWIGTYPE_p_grib_handle dest, string name, SWIGTYPE_p_grib_handle src) {
    int ret = GribApiProxyPINVOKE.GribCopyNamespace(SWIGTYPE_p_grib_handle.getCPtr(dest), name, SWIGTYPE_p_grib_handle.getCPtr(src));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribSetLong(SWIGTYPE_p_grib_handle h, string key, int val) {
    int ret = GribApiProxyPINVOKE.GribSetLong(SWIGTYPE_p_grib_handle.getCPtr(h), key, val);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribSetDouble(SWIGTYPE_p_grib_handle h, string key, double val) {
    int ret = GribApiProxyPINVOKE.GribSetDouble(SWIGTYPE_p_grib_handle.getCPtr(h), key, val);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribSetString(SWIGTYPE_p_grib_handle h, string key, string mesg, ref uint length) {
    int ret = GribApiProxyPINVOKE.GribSetString(SWIGTYPE_p_grib_handle.getCPtr(h), key, mesg, ref  length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribSetBytes(SWIGTYPE_p_grib_handle h, string key, byte[] bytes, ref uint length) {
    int ret = GribApiProxyPINVOKE.GribSetBytes(SWIGTYPE_p_grib_handle.getCPtr(h), key, bytes, ref  length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribSetDoubleArray(SWIGTYPE_p_grib_handle h, string key, double[] vals, uint length) {
    int ret = GribApiProxyPINVOKE.GribSetDoubleArray(SWIGTYPE_p_grib_handle.getCPtr(h), key, vals, length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribSetForceDoubleArray(SWIGTYPE_p_grib_handle h, string key, double[] vals, uint length) {
    int ret = GribApiProxyPINVOKE.GribSetForceDoubleArray(SWIGTYPE_p_grib_handle.getCPtr(h), key, vals, length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribSetLongArray(SWIGTYPE_p_grib_handle h, string key, int[] vals, uint length) {
    int ret = GribApiProxyPINVOKE.GribSetLongArray(SWIGTYPE_p_grib_handle.getCPtr(h), key, vals, length);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribDumpContent(SWIGTYPE_p_grib_handle h, SWIGTYPE_p_FILE arg1, string mode, uint option_flags, SWIGTYPE_p_void arg) {
    GribApiProxyPINVOKE.GribDumpContent(SWIGTYPE_p_grib_handle.getCPtr(h), SWIGTYPE_p_FILE.getCPtr(arg1), mode, option_flags, SWIGTYPE_p_void.getCPtr(arg));
  }

  public static void GribDumpActionTree(SWIGTYPE_p_grib_context c, SWIGTYPE_p_FILE f) {
    GribApiProxyPINVOKE.GribDumpActionTree(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_FILE.getCPtr(f));
  }

  public static SWIGTYPE_p_grib_context GribContextGetDefault() {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribContextGetDefault();
    SWIGTYPE_p_grib_context ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_context(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_context GribContextNew(SWIGTYPE_p_grib_context c) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribContextNew(SWIGTYPE_p_grib_context.getCPtr(c));
    SWIGTYPE_p_grib_context ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_context(cPtr, false);
    return ret;
  }

  public static void GribContextDelete(SWIGTYPE_p_grib_context c) {
    GribApiProxyPINVOKE.GribContextDelete(SWIGTYPE_p_grib_context.getCPtr(c));
  }

  public static void GribGtsHeaderOn(SWIGTYPE_p_grib_context c) {
    GribApiProxyPINVOKE.GribGtsHeaderOn(SWIGTYPE_p_grib_context.getCPtr(c));
  }

  public static void GribGtsHeaderOff(SWIGTYPE_p_grib_context c) {
    GribApiProxyPINVOKE.GribGtsHeaderOff(SWIGTYPE_p_grib_context.getCPtr(c));
  }

  public static void GribGribexModeOn(SWIGTYPE_p_grib_context c) {
    GribApiProxyPINVOKE.GribGribexModeOn(SWIGTYPE_p_grib_context.getCPtr(c));
  }

  public static void GribGetGribexMode(SWIGTYPE_p_grib_context c) {
    int ret = GribApiProxyPINVOKE.GribGetGribexMode(SWIGTYPE_p_grib_context.getCPtr(c));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGribexModeOff(SWIGTYPE_p_grib_context c) {
    GribApiProxyPINVOKE.GribGribexModeOff(SWIGTYPE_p_grib_context.getCPtr(c));
  }

  public static void GribContextSetMemoryProc(SWIGTYPE_p_grib_context c, SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void griballoc, SWIGTYPE_p_f_p_q_const__grib_context_p_void__void gribfree, SWIGTYPE_p_f_p_q_const__grib_context_p_void_size_t__p_void gribrealloc) {
    GribApiProxyPINVOKE.GribContextSetMemoryProc(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void.getCPtr(griballoc), SWIGTYPE_p_f_p_q_const__grib_context_p_void__void.getCPtr(gribfree), SWIGTYPE_p_f_p_q_const__grib_context_p_void_size_t__p_void.getCPtr(gribrealloc));
  }

  public static void GribContextSetPersistentMemoryProc(SWIGTYPE_p_grib_context c, SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void griballoc, SWIGTYPE_p_f_p_q_const__grib_context_p_void__void gribfree) {
    GribApiProxyPINVOKE.GribContextSetPersistentMemoryProc(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void.getCPtr(griballoc), SWIGTYPE_p_f_p_q_const__grib_context_p_void__void.getCPtr(gribfree));
  }

  public static void GribContextSetBufferMemoryProc(SWIGTYPE_p_grib_context c, SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void griballoc, SWIGTYPE_p_f_p_q_const__grib_context_p_void__void gribfree, SWIGTYPE_p_f_p_q_const__grib_context_p_void_size_t__p_void gribrealloc) {
    GribApiProxyPINVOKE.GribContextSetBufferMemoryProc(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void.getCPtr(griballoc), SWIGTYPE_p_f_p_q_const__grib_context_p_void__void.getCPtr(gribfree), SWIGTYPE_p_f_p_q_const__grib_context_p_void_size_t__p_void.getCPtr(gribrealloc));
  }

  public static void GribContextSetPrintProc(SWIGTYPE_p_grib_context c, SWIGTYPE_p_f_p_q_const__grib_context_p_void_p_q_const__char__void printp) {
    GribApiProxyPINVOKE.GribContextSetPrintProc(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_f_p_q_const__grib_context_p_void_p_q_const__char__void.getCPtr(printp));
  }

  public static void GribContextSetLoggingProc(SWIGTYPE_p_grib_context c, SWIGTYPE_p_f_p_q_const__grib_context_int_p_q_const__char__void logp) {
    GribApiProxyPINVOKE.GribContextSetLoggingProc(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_f_p_q_const__grib_context_int_p_q_const__char__void.getCPtr(logp));
  }

  public static void GribMultiSupportOn(SWIGTYPE_p_grib_context c) {
    GribApiProxyPINVOKE.GribMultiSupportOn(SWIGTYPE_p_grib_context.getCPtr(c));
  }

  public static void GribMultiSupportOff(SWIGTYPE_p_grib_context c) {
    GribApiProxyPINVOKE.GribMultiSupportOff(SWIGTYPE_p_grib_context.getCPtr(c));
  }

  public static void GribMultiSupportResetFile(SWIGTYPE_p_grib_context c, SWIGTYPE_p_FILE f) {
    GribApiProxyPINVOKE.GribMultiSupportResetFile(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_FILE.getCPtr(f));
  }

  public static string GribSamplesPath(SWIGTYPE_p_grib_context c) {
    string ret = GribApiProxyPINVOKE.GribSamplesPath(SWIGTYPE_p_grib_context.getCPtr(c));
    return ret;
  }

  public static int GribGetApiVersion() {
    int ret = GribApiProxyPINVOKE.GribGetApiVersion();
    return ret;
  }

  public static string GribGetGitSha1() {
    string ret = GribApiProxyPINVOKE.GribGetGitSha1();
    return ret;
  }

  public static void GribPrintApiVersion(SWIGTYPE_p_FILE arg0) {
    GribApiProxyPINVOKE.GribPrintApiVersion(SWIGTYPE_p_FILE.getCPtr(arg0));
  }

  public static SWIGTYPE_p_grib_keys_iterator GribKeysIteratorNew(SWIGTYPE_p_grib_handle h, uint filter_flags, string name_space) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribKeysIteratorNew(SWIGTYPE_p_grib_handle.getCPtr(h), filter_flags, name_space);
    SWIGTYPE_p_grib_keys_iterator ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_keys_iterator(cPtr, false);
    return ret;
  }

  public static int GribKeysIteratorNext(SWIGTYPE_p_grib_keys_iterator kiter) {
    return GribApiProxyPINVOKE.GribKeysIteratorNext(SWIGTYPE_p_grib_keys_iterator.getCPtr(kiter));
}

  public static string GribKeysIteratorGetName(SWIGTYPE_p_grib_keys_iterator kiter) {
    string ret = GribApiProxyPINVOKE.GribKeysIteratorGetName(SWIGTYPE_p_grib_keys_iterator.getCPtr(kiter));
    return ret;
  }

  public static void GribKeysIteratorDelete(SWIGTYPE_p_grib_keys_iterator kiter) {
    int ret = GribApiProxyPINVOKE.GribKeysIteratorDelete(SWIGTYPE_p_grib_keys_iterator.getCPtr(kiter));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribKeysIteratorRewind(SWIGTYPE_p_grib_keys_iterator kiter) {
    int ret = GribApiProxyPINVOKE.GribKeysIteratorRewind(SWIGTYPE_p_grib_keys_iterator.getCPtr(kiter));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribKeysIteratorSetFlags(SWIGTYPE_p_grib_keys_iterator kiter, uint flags) {
    int ret = GribApiProxyPINVOKE.GribKeysIteratorSetFlags(SWIGTYPE_p_grib_keys_iterator.getCPtr(kiter), flags);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribKeysIteratorGetLong(SWIGTYPE_p_grib_keys_iterator kiter, SWIGTYPE_p_long v, SWIGTYPE_p_size_t len) {
    int ret = GribApiProxyPINVOKE.GribKeysIteratorGetLong(SWIGTYPE_p_grib_keys_iterator.getCPtr(kiter), SWIGTYPE_p_long.getCPtr(v), SWIGTYPE_p_size_t.getCPtr(len));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribKeysIteratorGetDouble(SWIGTYPE_p_grib_keys_iterator kiter, SWIGTYPE_p_double v, SWIGTYPE_p_size_t len) {
    int ret = GribApiProxyPINVOKE.GribKeysIteratorGetDouble(SWIGTYPE_p_grib_keys_iterator.getCPtr(kiter), SWIGTYPE_p_double.getCPtr(v), SWIGTYPE_p_size_t.getCPtr(len));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribKeysIteratorGetString(SWIGTYPE_p_grib_keys_iterator kiter, string v, SWIGTYPE_p_size_t len) {
    int ret = GribApiProxyPINVOKE.GribKeysIteratorGetString(SWIGTYPE_p_grib_keys_iterator.getCPtr(kiter), v, SWIGTYPE_p_size_t.getCPtr(len));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribKeysIteratorGetBytes(SWIGTYPE_p_grib_keys_iterator kiter, SWIGTYPE_p_unsigned_char v, SWIGTYPE_p_size_t len) {
    int ret = GribApiProxyPINVOKE.GribKeysIteratorGetBytes(SWIGTYPE_p_grib_keys_iterator.getCPtr(kiter), SWIGTYPE_p_unsigned_char.getCPtr(v), SWIGTYPE_p_size_t.getCPtr(len));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribUpdateSectionsLengths(SWIGTYPE_p_grib_handle h) {
    GribApiProxyPINVOKE.GribUpdateSectionsLengths(SWIGTYPE_p_grib_handle.getCPtr(h));
  }

  public static string GribGetErrorMessage(int code) {
    string ret = GribApiProxyPINVOKE.GribGetErrorMessage(code);
    return ret;
  }

  public static string GribGetTypeName(int type) {
    string ret = GribApiProxyPINVOKE.GribGetTypeName(type);
    return ret;
  }

  public static void GribGetNativeType(SWIGTYPE_p_grib_handle h, string name, out int type) {
    int ret = GribApiProxyPINVOKE.GribGetNativeType(SWIGTYPE_p_grib_handle.getCPtr(h), name, out type);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribCheck(string call, string file, int line, int e, string msg) {
    GribApiProxyPINVOKE.GribCheck(call, file, line, e, msg);
  }

  public static void GribSetValues(SWIGTYPE_p_grib_handle h, SWIGTYPE_p_grib_values grib_values, uint arg_count) {
    int ret = GribApiProxyPINVOKE.GribSetValues(SWIGTYPE_p_grib_handle.getCPtr(h), SWIGTYPE_p_grib_values.getCPtr(grib_values), arg_count);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_handle GribHandleNewFromPartialMessageCopy(SWIGTYPE_p_grib_context c, SWIGTYPE_p_void data, uint size) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribHandleNewFromPartialMessageCopy(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_void.getCPtr(data), size);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_handle GribHandleNewFromPartialMessage(SWIGTYPE_p_grib_context c, SWIGTYPE_p_void data, uint buflen) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribHandleNewFromPartialMessage(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_void.getCPtr(data), buflen);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static bool GribIsMissing(SWIGTYPE_p_grib_handle h, string key, out int err) {
    int ret = GribApiProxyPINVOKE.GribIsMissing(SWIGTYPE_p_grib_handle.getCPtr(h), key, out err);
	
	if (err != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
	
	return ret == 1;
  }

  public static bool GribIsDefined(SWIGTYPE_p_grib_handle h, string key) {
    int ret = GribApiProxyPINVOKE.GribIsDefined(SWIGTYPE_p_grib_handle.getCPtr(h), key);

	return ret == 1;
  }

  public static void GribSetMissing(SWIGTYPE_p_grib_handle h, string key) {
    int ret = GribApiProxyPINVOKE.GribSetMissing(SWIGTYPE_p_grib_handle.getCPtr(h), key);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetGaussianLatitudes(int truncation, SWIGTYPE_p_double latitudes) {
    int ret = GribApiProxyPINVOKE.GribGetGaussianLatitudes(truncation, SWIGTYPE_p_double.getCPtr(latitudes));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribJulianToDatetime(double jd, SWIGTYPE_p_long year, SWIGTYPE_p_long month, SWIGTYPE_p_long day, SWIGTYPE_p_long hour, SWIGTYPE_p_long minute, SWIGTYPE_p_long second) {
    int ret = GribApiProxyPINVOKE.GribJulianToDatetime(jd, SWIGTYPE_p_long.getCPtr(year), SWIGTYPE_p_long.getCPtr(month), SWIGTYPE_p_long.getCPtr(day), SWIGTYPE_p_long.getCPtr(hour), SWIGTYPE_p_long.getCPtr(minute), SWIGTYPE_p_long.getCPtr(second));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribDatetimeToJulian(int year, int month, int day, int hour, int minute, int second, SWIGTYPE_p_double jd) {
    int ret = GribApiProxyPINVOKE.GribDatetimeToJulian(year, month, day, hour, minute, second, SWIGTYPE_p_double.getCPtr(jd));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static int GribJulianToDate(int jdate) {
    int ret = GribApiProxyPINVOKE.GribJulianToDate(jdate);
    return ret;
  }

  public static int GribDateToJulian(int ddate) {
    int ret = GribApiProxyPINVOKE.GribDateToJulian(ddate);
    return ret;
  }

  public static void GribGetReducedRow(int pl, double lon_first, double lon_last, SWIGTYPE_p_long npoints, SWIGTYPE_p_long ilon_first, SWIGTYPE_p_long ilon_last) {
    GribApiProxyPINVOKE.GribGetReducedRow(pl, lon_first, lon_last, SWIGTYPE_p_long.getCPtr(npoints), SWIGTYPE_p_long.getCPtr(ilon_first), SWIGTYPE_p_long.getCPtr(ilon_last));
  }

  public static void WmoReadAnyFromFile(SWIGTYPE_p_FILE f, SWIGTYPE_p_void buffer, SWIGTYPE_p_size_t len) {
    int ret = GribApiProxyPINVOKE.WmoReadAnyFromFile(SWIGTYPE_p_FILE.getCPtr(f), SWIGTYPE_p_void.getCPtr(buffer), SWIGTYPE_p_size_t.getCPtr(len));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void WmoReadGribFromFile(SWIGTYPE_p_FILE f, SWIGTYPE_p_void buffer, SWIGTYPE_p_size_t len) {
    int ret = GribApiProxyPINVOKE.WmoReadGribFromFile(SWIGTYPE_p_FILE.getCPtr(f), SWIGTYPE_p_void.getCPtr(buffer), SWIGTYPE_p_size_t.getCPtr(len));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void WmoReadBufrFromFile(SWIGTYPE_p_FILE f, SWIGTYPE_p_void buffer, SWIGTYPE_p_size_t len) {
    int ret = GribApiProxyPINVOKE.WmoReadBufrFromFile(SWIGTYPE_p_FILE.getCPtr(f), SWIGTYPE_p_void.getCPtr(buffer), SWIGTYPE_p_size_t.getCPtr(len));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void WmoReadGtsFromFile(SWIGTYPE_p_FILE f, SWIGTYPE_p_void buffer, SWIGTYPE_p_size_t len) {
    int ret = GribApiProxyPINVOKE.WmoReadGtsFromFile(SWIGTYPE_p_FILE.getCPtr(f), SWIGTYPE_p_void.getCPtr(buffer), SWIGTYPE_p_size_t.getCPtr(len));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void WmoReadAnyFromStream(SWIGTYPE_p_void stream_data, SWIGTYPE_p_f_p_void_p_void_long__long stream_proc, SWIGTYPE_p_void buffer, SWIGTYPE_p_size_t len) {
    int ret = GribApiProxyPINVOKE.WmoReadAnyFromStream(SWIGTYPE_p_void.getCPtr(stream_data), SWIGTYPE_p_f_p_void_p_void_long__long.getCPtr(stream_proc), SWIGTYPE_p_void.getCPtr(buffer), SWIGTYPE_p_size_t.getCPtr(len));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_void WmoReadAnyFromFileMalloc(SWIGTYPE_p_FILE f, int headers_only, ref uint size, SWIGTYPE_p_off_t offset, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.WmoReadAnyFromFileMalloc(SWIGTYPE_p_FILE.getCPtr(f), headers_only, ref  size, SWIGTYPE_p_off_t.getCPtr(offset), out err);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void WmoReadGtsFromFileMalloc(SWIGTYPE_p_FILE f, int headers_only, ref uint size, SWIGTYPE_p_off_t offset, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.WmoReadGtsFromFileMalloc(SWIGTYPE_p_FILE.getCPtr(f), headers_only, ref  size, SWIGTYPE_p_off_t.getCPtr(offset), out err);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void WmoReadBufrFromFileMalloc(SWIGTYPE_p_FILE f, int headers_only, ref uint size, SWIGTYPE_p_off_t offset, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.WmoReadBufrFromFileMalloc(SWIGTYPE_p_FILE.getCPtr(f), headers_only, ref  size, SWIGTYPE_p_off_t.getCPtr(offset), out err);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_handle EccodeGtsNewFromFile(SWIGTYPE_p_grib_context c, SWIGTYPE_p_FILE f, int headers_only, out int error) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.EccodeGtsNewFromFile(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_FILE.getCPtr(f), headers_only, out error);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_handle EccodeBufrNewFromFile(SWIGTYPE_p_grib_context c, SWIGTYPE_p_FILE f, int headers_only, out int error) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.EccodeBufrNewFromFile(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_FILE.getCPtr(f), headers_only, out error);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_handle EccodeGribNewFromFile(SWIGTYPE_p_grib_context c, SWIGTYPE_p_FILE f, int headers_only, out int error) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.EccodeGribNewFromFile(SWIGTYPE_p_grib_context.getCPtr(c), SWIGTYPE_p_FILE.getCPtr(f), headers_only, out error);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static void GribGetMessageOffset(SWIGTYPE_p_grib_handle h, SWIGTYPE_p_off_t offset) {
    int ret = GribApiProxyPINVOKE.GribGetMessageOffset(SWIGTYPE_p_grib_handle.getCPtr(h), SWIGTYPE_p_off_t.getCPtr(offset));
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static void GribGetMessageSize(SWIGTYPE_p_grib_handle h, ref uint size) {
    int ret = GribApiProxyPINVOKE.GribGetMessageSize(SWIGTYPE_p_grib_handle.getCPtr(h), ref  size);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_box GribBoxNew(SWIGTYPE_p_grib_handle h, out int error) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribBoxNew(SWIGTYPE_p_grib_handle.getCPtr(h), out error);
    SWIGTYPE_p_grib_box ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_box(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_grib_points GribBoxGetPoints(SWIGTYPE_p_grib_box box, double north, double west, double south, double east, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribBoxGetPoints(SWIGTYPE_p_grib_box.getCPtr(box), north, west, south, east, out err);
    SWIGTYPE_p_grib_points ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_points(cPtr, false);
    return ret;
  }

  public static void GribPointsGetValues(SWIGTYPE_p_grib_handle h, SWIGTYPE_p_grib_points points, out double val) {
    int ret = GribApiProxyPINVOKE.GribPointsGetValues(SWIGTYPE_p_grib_handle.getCPtr(h), SWIGTYPE_p_grib_points.getCPtr(points), out val);
	
	if (ret != 0)
	{
		throw Grib.Api.GribApiException.Create(ret);
	}
  }

  public static SWIGTYPE_p_grib_handle GribUtilSetSpec(SWIGTYPE_p_grib_handle h, GribUtilGridSpec grid_spec, GribUtilPackingSpec packing_spec, int flags, SWIGTYPE_p_double data_values, uint data_values_count, out int err) {
    global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribUtilSetSpec(SWIGTYPE_p_grib_handle.getCPtr(h), GribUtilGridSpec.getCPtr(grid_spec), GribUtilPackingSpec.getCPtr(packing_spec), flags, SWIGTYPE_p_double.getCPtr(data_values), data_values_count, out err);
    SWIGTYPE_p_grib_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_handle(cPtr, false);
    return ret;
  }

  public static readonly int GRIB_SECTION_PRODUCT = GribApiProxyPINVOKE.GRIB_SECTION_PRODUCT_get();
  public static readonly int GRIB_SECTION_GRID = GribApiProxyPINVOKE.GRIB_SECTION_GRID_get();
  public static readonly int GRIB_SECTION_LOCAL = GribApiProxyPINVOKE.GRIB_SECTION_LOCAL_get();
  public static readonly int GRIB_SECTION_DATA = GribApiProxyPINVOKE.GRIB_SECTION_DATA_get();
  public static readonly int GRIB_SECTION_BITMAP = GribApiProxyPINVOKE.GRIB_SECTION_BITMAP_get();
  public static readonly int GRIB_LOG_INFO = GribApiProxyPINVOKE.GRIB_LOG_INFO_get();
  public static readonly int GRIB_LOG_WARNING = GribApiProxyPINVOKE.GRIB_LOG_WARNING_get();
  public static readonly int GRIB_LOG_ERROR = GribApiProxyPINVOKE.GRIB_LOG_ERROR_get();
  public static readonly int GRIB_LOG_FATAL = GribApiProxyPINVOKE.GRIB_LOG_FATAL_get();
  public static readonly int GRIB_LOG_DEBUG = GribApiProxyPINVOKE.GRIB_LOG_DEBUG_get();
  public static readonly int GRIB_MISSING_LONG = GribApiProxyPINVOKE.GRIB_MISSING_LONG_get();
  public static readonly double GRIB_MISSING_DOUBLE = GribApiProxyPINVOKE.GRIB_MISSING_DOUBLE_get();
  public static readonly int GRIB_UTIL_SET_SPEC_FLAGS_ONLY_PACKING = GribApiProxyPINVOKE.GRIB_UTIL_SET_SPEC_FLAGS_ONLY_PACKING_get();
  public static readonly int GRIB_DUMP_FLAG_READ_ONLY = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_READ_ONLY_get();
  public static readonly int GRIB_DUMP_FLAG_DUMP_OK = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_DUMP_OK_get();
  public static readonly int GRIB_DUMP_FLAG_VALUES = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_VALUES_get();
  public static readonly int GRIB_DUMP_FLAG_CODED = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_CODED_get();
  public static readonly int GRIB_DUMP_FLAG_OCTECT = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_OCTECT_get();
  public static readonly int GRIB_DUMP_FLAG_ALIASES = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_ALIASES_get();
  public static readonly int GRIB_DUMP_FLAG_TYPE = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_TYPE_get();
  public static readonly int GRIB_DUMP_FLAG_HEXADECIMAL = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_HEXADECIMAL_get();
  public static readonly int GRIB_DUMP_FLAG_NO_DATA = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_NO_DATA_get();
  public static readonly int GRIB_DUMP_FLAG_ALL_DATA = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_ALL_DATA_get();
  public static readonly int GRIB_NEAREST_SAME_GRID = GribApiProxyPINVOKE.GRIB_NEAREST_SAME_GRID_get();
  public static readonly int GRIB_NEAREST_SAME_DATA = GribApiProxyPINVOKE.GRIB_NEAREST_SAME_DATA_get();
  public static readonly int GRIB_NEAREST_SAME_POINT = GribApiProxyPINVOKE.GRIB_NEAREST_SAME_POINT_get();
  public static readonly int GRIB_KEYS_ITERATOR_ALL_KEYS = GribApiProxyPINVOKE.GRIB_KEYS_ITERATOR_ALL_KEYS_get();
  public static readonly int GRIB_KEYS_ITERATOR_SKIP_READ_ONLY = GribApiProxyPINVOKE.GRIB_KEYS_ITERATOR_SKIP_READ_ONLY_get();
  public static readonly int GRIB_KEYS_ITERATOR_SKIP_OPTIONAL = GribApiProxyPINVOKE.GRIB_KEYS_ITERATOR_SKIP_OPTIONAL_get();
  public static readonly int GRIB_KEYS_ITERATOR_SKIP_EDITION_SPECIFIC = GribApiProxyPINVOKE.GRIB_KEYS_ITERATOR_SKIP_EDITION_SPECIFIC_get();
  public static readonly int GRIB_KEYS_ITERATOR_SKIP_CODED = GribApiProxyPINVOKE.GRIB_KEYS_ITERATOR_SKIP_CODED_get();
  public static readonly int GRIB_KEYS_ITERATOR_SKIP_COMPUTED = GribApiProxyPINVOKE.GRIB_KEYS_ITERATOR_SKIP_COMPUTED_get();
  public static readonly int GRIB_KEYS_ITERATOR_SKIP_DUPLICATES = GribApiProxyPINVOKE.GRIB_KEYS_ITERATOR_SKIP_DUPLICATES_get();
  public static readonly int GRIB_KEYS_ITERATOR_SKIP_FUNCTION = GribApiProxyPINVOKE.GRIB_KEYS_ITERATOR_SKIP_FUNCTION_get();
  public static readonly int GRIB_UTIL_GRID_SPEC_REGULAR_LL = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_REGULAR_LL_get();
  public static readonly int GRIB_UTIL_GRID_SPEC_ROTATED_LL = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_ROTATED_LL_get();
  public static readonly int GRIB_UTIL_GRID_SPEC_REGULAR_GG = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_REGULAR_GG_get();
  public static readonly int GRIB_UTIL_GRID_SPEC_ROTATED_GG = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_ROTATED_GG_get();
  public static readonly int GRIB_UTIL_GRID_SPEC_REDUCED_GG = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_REDUCED_GG_get();
  public static readonly int GRIB_UTIL_GRID_SPEC_SH = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_SH_get();
  public static readonly int GRIB_UTIL_GRID_SPEC_REDUCED_LL = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_REDUCED_LL_get();
  public static readonly int GRIB_UTIL_GRID_SPEC_POLAR_STEREOGRAPHIC = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_POLAR_STEREOGRAPHIC_get();
  public static readonly int GRIB_UTIL_GRID_SPEC_REDUCED_ROTATED_GG = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_REDUCED_ROTATED_GG_get();
  public static readonly int GRIB_UTIL_PACKING_TYPE_SAME_AS_INPUT = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_SAME_AS_INPUT_get();
  public static readonly int GRIB_UTIL_PACKING_TYPE_SPECTRAL_COMPLEX = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_SPECTRAL_COMPLEX_get();
  public static readonly int GRIB_UTIL_PACKING_TYPE_SPECTRAL_SIMPLE = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_SPECTRAL_SIMPLE_get();
  public static readonly int GRIB_UTIL_PACKING_TYPE_JPEG = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_JPEG_get();
  public static readonly int GRIB_UTIL_PACKING_TYPE_GRID_COMPLEX = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_GRID_COMPLEX_get();
  public static readonly int GRIB_UTIL_PACKING_TYPE_GRID_SIMPLE = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_GRID_SIMPLE_get();
  public static readonly int GRIB_UTIL_PACKING_TYPE_GRID_SIMPLE_MATRIX = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_GRID_SIMPLE_MATRIX_get();
  public static readonly int GRIB_UTIL_PACKING_TYPE_GRID_SECOND_ORDER = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_GRID_SECOND_ORDER_get();
  public static readonly int GRIB_UTIL_PACKING_SAME_AS_INPUT = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_SAME_AS_INPUT_get();
  public static readonly int GRIB_UTIL_PACKING_USE_PROVIDED = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_USE_PROVIDED_get();
  public static readonly int GRIB_UTIL_ACCURACY_SAME_BITS_PER_VALUES_AS_INPUT = GribApiProxyPINVOKE.GRIB_UTIL_ACCURACY_SAME_BITS_PER_VALUES_AS_INPUT_get();
  public static readonly int GRIB_UTIL_ACCURACY_USE_PROVIDED_BITS_PER_VALUES = GribApiProxyPINVOKE.GRIB_UTIL_ACCURACY_USE_PROVIDED_BITS_PER_VALUES_get();
  public static readonly int GRIB_UTIL_ACCURACY_SAME_DECIMAL_SCALE_FACTOR_AS_INPUT = GribApiProxyPINVOKE.GRIB_UTIL_ACCURACY_SAME_DECIMAL_SCALE_FACTOR_AS_INPUT_get();
  public static readonly int GRIB_UTIL_ACCURACY_USE_PROVIDED_DECIMAL_SCALE_FACTOR = GribApiProxyPINVOKE.GRIB_UTIL_ACCURACY_USE_PROVIDED_DECIMAL_SCALE_FACTOR_get();
  public static readonly int GRIB_SUCCESS = GribApiProxyPINVOKE.GRIB_SUCCESS_get();
  public static readonly int GRIB_END_OF_FILE = GribApiProxyPINVOKE.GRIB_END_OF_FILE_get();
  public static readonly int GRIB_INTERNAL_ERROR = GribApiProxyPINVOKE.GRIB_INTERNAL_ERROR_get();
  public static readonly int GRIB_BUFFER_TOO_SMALL = GribApiProxyPINVOKE.GRIB_BUFFER_TOO_SMALL_get();
  public static readonly int GRIB_NOT_IMPLEMENTED = GribApiProxyPINVOKE.GRIB_NOT_IMPLEMENTED_get();
  public static readonly int GRIB_7777_NOT_FOUND = GribApiProxyPINVOKE.GRIB_7777_NOT_FOUND_get();
  public static readonly int GRIB_ARRAY_TOO_SMALL = GribApiProxyPINVOKE.GRIB_ARRAY_TOO_SMALL_get();
  public static readonly int GRIB_FILE_NOT_FOUND = GribApiProxyPINVOKE.GRIB_FILE_NOT_FOUND_get();
  public static readonly int GRIB_CODE_NOT_FOUND_IN_TABLE = GribApiProxyPINVOKE.GRIB_CODE_NOT_FOUND_IN_TABLE_get();
  public static readonly int GRIB_WRONG_ARRAY_SIZE = GribApiProxyPINVOKE.GRIB_WRONG_ARRAY_SIZE_get();
  public static readonly int GRIB_NOT_FOUND = GribApiProxyPINVOKE.GRIB_NOT_FOUND_get();
  public static readonly int GRIB_IO_PROBLEM = GribApiProxyPINVOKE.GRIB_IO_PROBLEM_get();
  public static readonly int GRIB_INVALID_MESSAGE = GribApiProxyPINVOKE.GRIB_INVALID_MESSAGE_get();
  public static readonly int GRIB_DECODING_ERROR = GribApiProxyPINVOKE.GRIB_DECODING_ERROR_get();
  public static readonly int GRIB_ENCODING_ERROR = GribApiProxyPINVOKE.GRIB_ENCODING_ERROR_get();
  public static readonly int GRIB_NO_MORE_IN_SET = GribApiProxyPINVOKE.GRIB_NO_MORE_IN_SET_get();
  public static readonly int GRIB_GEOCALCULUS_PROBLEM = GribApiProxyPINVOKE.GRIB_GEOCALCULUS_PROBLEM_get();
  public static readonly int GRIB_OUT_OF_MEMORY = GribApiProxyPINVOKE.GRIB_OUT_OF_MEMORY_get();
  public static readonly int GRIB_READ_ONLY = GribApiProxyPINVOKE.GRIB_READ_ONLY_get();
  public static readonly int GRIB_INVALID_ARGUMENT = GribApiProxyPINVOKE.GRIB_INVALID_ARGUMENT_get();
  public static readonly int GRIB_NULL_HANDLE = GribApiProxyPINVOKE.GRIB_NULL_HANDLE_get();
  public static readonly int GRIB_INVALID_SECTION_NUMBER = GribApiProxyPINVOKE.GRIB_INVALID_SECTION_NUMBER_get();
  public static readonly int GRIB_VALUE_CANNOT_BE_MISSING = GribApiProxyPINVOKE.GRIB_VALUE_CANNOT_BE_MISSING_get();
  public static readonly int GRIB_WRONG_LENGTH = GribApiProxyPINVOKE.GRIB_WRONG_LENGTH_get();
  public static readonly int GRIB_INVALID_TYPE = GribApiProxyPINVOKE.GRIB_INVALID_TYPE_get();
  public static readonly int GRIB_WRONG_STEP = GribApiProxyPINVOKE.GRIB_WRONG_STEP_get();
  public static readonly int GRIB_WRONG_STEP_UNIT = GribApiProxyPINVOKE.GRIB_WRONG_STEP_UNIT_get();
  public static readonly int GRIB_INVALID_FILE = GribApiProxyPINVOKE.GRIB_INVALID_FILE_get();
  public static readonly int GRIB_INVALID_GRIB = GribApiProxyPINVOKE.GRIB_INVALID_GRIB_get();
  public static readonly int GRIB_INVALID_INDEX = GribApiProxyPINVOKE.GRIB_INVALID_INDEX_get();
  public static readonly int GRIB_INVALID_ITERATOR = GribApiProxyPINVOKE.GRIB_INVALID_ITERATOR_get();
  public static readonly int GRIB_INVALID_KEYS_ITERATOR = GribApiProxyPINVOKE.GRIB_INVALID_KEYS_ITERATOR_get();
  public static readonly int GRIB_INVALID_NEAREST = GribApiProxyPINVOKE.GRIB_INVALID_NEAREST_get();
  public static readonly int GRIB_INVALID_ORDERBY = GribApiProxyPINVOKE.GRIB_INVALID_ORDERBY_get();
  public static readonly int GRIB_MISSING_KEY = GribApiProxyPINVOKE.GRIB_MISSING_KEY_get();
  public static readonly int GRIB_OUT_OF_AREA = GribApiProxyPINVOKE.GRIB_OUT_OF_AREA_get();
  public static readonly int GRIB_CONCEPT_NO_MATCH = GribApiProxyPINVOKE.GRIB_CONCEPT_NO_MATCH_get();
  public static readonly int GRIB_NO_DEFINITIONS = GribApiProxyPINVOKE.GRIB_NO_DEFINITIONS_get();
  public static readonly int GRIB_WRONG_TYPE = GribApiProxyPINVOKE.GRIB_WRONG_TYPE_get();
  public static readonly int GRIB_END = GribApiProxyPINVOKE.GRIB_END_get();
  public static readonly int GRIB_NO_VALUES = GribApiProxyPINVOKE.GRIB_NO_VALUES_get();
  public static readonly int GRIB_WRONG_GRID = GribApiProxyPINVOKE.GRIB_WRONG_GRID_get();
  public static readonly int GRIB_END_OF_INDEX = GribApiProxyPINVOKE.GRIB_END_OF_INDEX_get();
  public static readonly int GRIB_NULL_INDEX = GribApiProxyPINVOKE.GRIB_NULL_INDEX_get();
  public static readonly int GRIB_PREMATURE_END_OF_FILE = GribApiProxyPINVOKE.GRIB_PREMATURE_END_OF_FILE_get();
  public static readonly int GRIB_INTERNAL_ARRAY_TOO_SMALL = GribApiProxyPINVOKE.GRIB_INTERNAL_ARRAY_TOO_SMALL_get();
  public static readonly int GRIB_MESSAGE_TOO_LARGE = GribApiProxyPINVOKE.GRIB_MESSAGE_TOO_LARGE_get();
  public static readonly int GRIB_CONSTANT_FIELD = GribApiProxyPINVOKE.GRIB_CONSTANT_FIELD_get();
  public static readonly int GRIB_SWITCH_NO_MATCH = GribApiProxyPINVOKE.GRIB_SWITCH_NO_MATCH_get();
  public static readonly int GRIB_UNDERFLOW = GribApiProxyPINVOKE.GRIB_UNDERFLOW_get();
  public static readonly int GRIB_MESSAGE_MALFORMED = GribApiProxyPINVOKE.GRIB_MESSAGE_MALFORMED_get();
  public static readonly int GRIB_CORRUPTED_INDEX = GribApiProxyPINVOKE.GRIB_CORRUPTED_INDEX_get();
  public static readonly int GRIB_INVALID_BPV = GribApiProxyPINVOKE.GRIB_INVALID_BPV_get();
  public static readonly int GRIB_DIFFERENT_EDITION = GribApiProxyPINVOKE.GRIB_DIFFERENT_EDITION_get();
  public static readonly int GRIB_VALUE_DIFFERENT = GribApiProxyPINVOKE.GRIB_VALUE_DIFFERENT_get();
  public static readonly int GRIB_INVALID_KEY_VALUE = GribApiProxyPINVOKE.GRIB_INVALID_KEY_VALUE_get();
}

}
